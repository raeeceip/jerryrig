{
  "repository_url": "https://github.com/test/sample-python-project",
  "analysis_timestamp": "2025-09-06T00:00:00Z",
  "summary": "Sample Python Project",
  "language_breakdown": {
    "primary_language": "Python",
    "languages": ["Python", "JSON"]
  },
  "file_structure": [],
  "dependencies": [],
  "readme_content": "# Sample Python Project\nA demonstration project for JerryRig migration",
  "license": "MIT",
  "contributors": 1,
  "last_updated": "2025-09-06",
  "raw_content": "# Sample Python Project\n\n## Project Structure\n\n```\nsrc/\n├── main.py\n├── utils.py\n└── config.py\ntests/\n└── test_main.py\nREADME.md\nrequirements.txt\n```\n\n## main.py\n\n```python\n#!/usr/bin/env python3\n\"\"\"Main application module.\"\"\"\n\nimport json\nimport os\nfrom utils import DataProcessor, ConfigManager\n\ndef main():\n    \"\"\"Main application entry point.\"\"\"\n    config = ConfigManager()\n    processor = DataProcessor(config.get_settings())\n    \n    data = [\n        {\"id\": 1, \"name\": \"Alice\", \"score\": 95},\n        {\"id\": 2, \"name\": \"Bob\", \"score\": 87},\n        {\"id\": 3, \"name\": \"Charlie\", \"score\": 92}\n    ]\n    \n    results = processor.process_data(data)\n    print(f\"Processed {len(results)} records\")\n    \n    # Save results\n    with open(\"output.json\", \"w\") as f:\n        json.dump(results, f, indent=2)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n## utils.py\n\n```python\n\"\"\"Utility functions and classes.\"\"\"\n\nimport json\nfrom typing import List, Dict, Any\n\nclass DataProcessor:\n    \"\"\"Process and transform data.\"\"\"\n    \n    def __init__(self, settings: Dict[str, Any]):\n        self.settings = settings\n        self.multiplier = settings.get(\"multiplier\", 1.0)\n    \n    def process_data(self, data: List[Dict]) -> List[Dict]:\n        \"\"\"Process a list of data records.\"\"\"\n        processed = []\n        \n        for record in data:\n            if self.validate_record(record):\n                processed_record = {\n                    \"id\": record[\"id\"],\n                    \"name\": record[\"name\"].upper(),\n                    \"score\": record[\"score\"] * self.multiplier,\n                    \"grade\": self.calculate_grade(record[\"score\"])\n                }\n                processed.append(processed_record)\n        \n        return processed\n    \n    def validate_record(self, record: Dict) -> bool:\n        \"\"\"Validate a data record.\"\"\"\n        required_fields = [\"id\", \"name\", \"score\"]\n        return all(field in record for field in required_fields)\n    \n    def calculate_grade(self, score: int) -> str:\n        \"\"\"Calculate letter grade from numeric score.\"\"\"\n        if score >= 90:\n            return \"A\"\n        elif score >= 80:\n            return \"B\"\n        elif score >= 70:\n            return \"C\"\n        elif score >= 60:\n            return \"D\"\n        else:\n            return \"F\"\n\nclass ConfigManager:\n    \"\"\"Manage application configuration.\"\"\"\n    \n    def __init__(self, config_file: str = \"config.json\"):\n        self.config_file = config_file\n        self.settings = self.load_settings()\n    \n    def load_settings(self) -> Dict[str, Any]:\n        \"\"\"Load settings from configuration file.\"\"\"\n        try:\n            with open(self.config_file, \"r\") as f:\n                return json.load(f)\n        except FileNotFoundError:\n            return self.get_default_settings()\n    \n    def get_default_settings(self) -> Dict[str, Any]:\n        \"\"\"Return default settings.\"\"\"\n        return {\n            \"multiplier\": 1.0,\n            \"output_format\": \"json\",\n            \"debug\": False\n        }\n    \n    def get_settings(self) -> Dict[str, Any]:\n        \"\"\"Get current settings.\"\"\"\n        return self.settings.copy()\n```\n\n## config.py\n\n```python\n\"\"\"Configuration constants and settings.\"\"\"\n\nAPP_NAME = \"Sample Python Project\"\nVERSION = \"1.0.0\"\nDEBUG = False\n\n# Database settings\nDATABASE_CONFIG = {\n    \"host\": \"localhost\",\n    \"port\": 5432,\n    \"database\": \"sample_db\",\n    \"username\": \"user\",\n    \"password\": \"password\"\n}\n\n# Processing settings\nPROCESSING_CONFIG = {\n    \"batch_size\": 100,\n    \"timeout\": 30,\n    \"retry_attempts\": 3\n}\n\n# Output settings\nOUTPUT_CONFIG = {\n    \"format\": \"json\",\n    \"indent\": 2,\n    \"ensure_ascii\": False\n}\n```\n\n## test_main.py\n\n```python\n\"\"\"Tests for main module.\"\"\"\n\nimport unittest\nimport sys\nimport os\n\n# Add src to path\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))\n\nfrom main import main\nfrom utils import DataProcessor, ConfigManager\n\nclass TestMain(unittest.TestCase):\n    \"\"\"Test cases for main module.\"\"\"\n    \n    def setUp(self):\n        \"\"\"Set up test fixtures.\"\"\"\n        self.config_manager = ConfigManager()\n        self.processor = DataProcessor(self.config_manager.get_settings())\n    \n    def test_data_processor(self):\n        \"\"\"Test data processing functionality.\"\"\"\n        test_data = [\n            {\"id\": 1, \"name\": \"Test\", \"score\": 85}\n        ]\n        \n        result = self.processor.process_data(test_data)\n        \n        self.assertEqual(len(result), 1)\n        self.assertEqual(result[0][\"name\"], \"TEST\")\n        self.assertEqual(result[0][\"grade\"], \"B\")\n    \n    def test_validate_record(self):\n        \"\"\"Test record validation.\"\"\"\n        valid_record = {\"id\": 1, \"name\": \"Test\", \"score\": 85}\n        invalid_record = {\"id\": 1, \"name\": \"Test\"}\n        \n        self.assertTrue(self.processor.validate_record(valid_record))\n        self.assertFalse(self.processor.validate_record(invalid_record))\n\nif __name__ == \"__main__\":\n    unittest.main()\n```",
  "status": "success",
  "file_count": 4
}